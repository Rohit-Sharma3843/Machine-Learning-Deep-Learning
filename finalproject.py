# -*- coding: utf-8 -*-
"""FinalProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12atIo4HPXqk4FFhjXqo8bokeiXnHmCTy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('ds_gpt_2.csv')

print("1 : ",df.info(),"\n\n\n\n")
print("2 : ",df.describe(),"\n\n\n\n")
print("3 : ",df.head(50),"\n\n\n\n")
print("4 : ",df.tail(50),"\n\n\n\n")
print("5 : ",df.shape,"\n\n\n\n")
print("6 : ",df.ndim,"\n\n\n\n")
print("7 : ",df.columns,"\n\n\n\n")

a=df.groupby('Location')['Drive_Life_Risk'].mean()
print("7 : ",a,"\n\n\n\n")
b=df.groupby('Vehicle_Model_Year')['Drive_Life_Risk'].mean()
print("8 : ",b,"\n\n\n\n")
c=df.groupby('Registration_State')['Drive_Life_Risk'].mean()
print("9 : ",c,"\n\n\n\n")
d=df.groupby('Weather_Condition')['Drive_Life_Risk'].mean()
print("10 : ",d,"\n\n\n\n")
e=df.groupby('Driver_Gender')['Drive_Life_Risk'].mean()
print("11 : ",e,"\n\n\n\n")
f=df.groupby('Driver_Age')['Drive_Life_Risk'].mean()
print("12 : ",f,"\n\n\n\n")
g=df.groupby('Helmet_Worn')['Drive_Life_Risk'].mean()
print("13 : ",g,"\n\n\n\n")
h=df.groupby('Seatbelt_Worn')['Drive_Life_Risk'].mean()
print("14 : ",f,"\n\n\n\n")
i=df.groupby('Road_Condition')['Drive_Life_Risk'].mean()
print("15 : ",g,"\n\n\n\n")
j=df.groupby('Alcohol_Level')['Drive_Life_Risk'].mean()
print("16 : ",h,"\n\n\n\n")

print("17 : Location\n\n")
plt.pie(a,labels=a.index,autopct='%.1f')
plt.title("Distribution of location\n")
plt.show()
plt.title("Distribution of location")
plt.scatter(df['Location'],df['Drive_Life_Risk'])
plt.show()
print("18 : Vehicle model year \n\n")
plt.title("Distribution of vehicle model year")
plt.pie(b,labels=b.index,autopct='%.1f')
plt.show()
plt.title("Distribution of vehicle model year")
plt.scatter(df['Vehicle_Model_Year'],df['Drive_Life_Risk'])
plt.show()
plt.title("Distribution of vehicle model year")
plt.boxplot(df['Vehicle_Model_Year'])
print("19 : Registration State\n\n")
plt.title("Distribution of Registration State")
plt.pie(c,labels=c.index,autopct='%.1f')
plt.show()
plt.title("Distribution of Registration State")
plt.scatter(df['Registration_State'],df['Drive_Life_Risk'])
plt.show()
print("20 : Weather Condition\n\n")
plt.title("Distribution of Weather Condition")
plt.pie(d,labels=d.index,autopct='%.1f')
plt.show()
plt.title("Distribution of Weather Condition")
plt.scatter(df['Weather_Condition'],df['Drive_Life_Risk'])
plt.show()
print("21 : Driver Gender\n\n")
plt.title("Distribution of Driver Gender")
plt.pie(e,labels=e.index,autopct='%.1f')
plt.show()
plt.title("Distribution of Driver Gender")
plt.scatter(df['Driver_Gender'],df['Drive_Life_Risk'])
plt.show()
print("22 : Driver Age  \n\n")
plt.bar(df['Driver_Age'],df['Drive_Life_Risk'])
plt.xlabel('Driver Age')
plt.ylabel('Maximum Drive Life Risk')
plt.title('Distribution of Driver Age')
plt.show()
plt.title("Distribution of Driver Age")
plt.scatter(df['Driver_Age'],df['Drive_Life_Risk'])
plt.ylabel('Maximum Drive Life Risk')
plt.show()
plt.title("Distribution of Driver Age")
plt.ylabel('Maximum Drive Life Risk')
plt.boxplot(df['Driver_Age'])
plt.show()
print("23 :Helmet Worn \n\n")
plt.title("Distribution of Helmet Worn")
plt.pie(g,labels=g.index,autopct='%.1f')
plt.show()
print("24 : Seatbelt Worn\n\n")
plt.title("Distribution of Seatbelt Worn")
plt.pie(h,labels=h.index,autopct='%.1f')
plt.show()
print("25 : Road Condition\n\n")
plt.title("Distribution of Road Condition")
plt.pie(i,labels=i.index,autopct='%.1f')
plt.show()
plt.title("Distribution of Road Condition")
plt.xlabel('Road Condition')
plt.ylabel('Maximum Drive Life Risk')
plt.scatter(df['Road_Condition'],df['Drive_Life_Risk'])
plt.show()
print("26 : \n\n")
plt.title("Distribution of Alcohol Level")
plt.bar(df['Alcohol_Level'],df['Drive_Life_Risk'])
plt.xlabel('Alcohol Level')
plt.ylabel('Maximum Drive Life Risk')
plt.show()
plt.title("Distribution of Alcohol Level")
plt.scatter(df['Alcohol_Level'],df['Drive_Life_Risk'])
plt.xlabel('Alcohol Level')
plt.ylabel('Maximum Drive Life Risk')
plt.show()

df['Helmet_Worn'].fillna(value='Not required',inplace=True)
df['Seatbelt_Worn'].fillna(value='Not available',inplace=True)
print(df.columns)
df['overspeeding'] = (df['Recorded_Speed'] > df['Speed_Limit']).astype(int)
df.drop(columns=['Registration_State','Vehicle_Model_Year','Time','Violation_Type','Alcohol_Level','Speed_Limit','Recorded_Speed','Location','Traffic_Light_Status','Date','Violation_ID','Fine_Amount','Vehicle_Color','License_Type','Penalty_Points','Officer_ID','Issuing_Agency','License_Validity','Towed','Fine_Paid','Payment_Method','Court_Appearance_Required','Comments'],inplace=True)
print(df.columns)
print(df.shape)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
le.fit(df['Driver_Gender'])
df['Driver_Gender']=le.transform(df['Driver_Gender'])
le.fit(df['Road_Condition'])
df['Road_Condition']=le.transform(df['Road_Condition'])
le.fit(df['Weather_Condition'])
df['Weather_Condition']=le.transform(df['Weather_Condition'])
le.fit(df['Helmet_Worn'])
df['Helmet_Worn']=le.transform(df['Helmet_Worn'])
le.fit(df['Seatbelt_Worn'])
df['Seatbelt_Worn']=le.transform(df['Seatbelt_Worn'])
le.fit(df['Breathalyzer_Result'])
df['Breathalyzer_Result']=le.transform(df['Breathalyzer_Result'])
le.fit(df['Vehicle_Type'])
df['Vehicle_Type']=le.transform(df['Vehicle_Type'])
df

from sklearn.preprocessing import StandardScaler,MinMaxScaler
scaler=MinMaxScaler()
print("Max age : ",df['Driver_Age'].max(),"\n")
print("Min age : ",df['Driver_Age'].min(),"\n")
df['Driver_Age']=scaler.fit_transform(df[['Driver_Age']])
print("Max age : ",df['Driver_Age'].max(),"\n")
print("Min age : ",df['Driver_Age'].min(),"\n")
df

vehicle_counts = df['Vehicle_Type'].value_counts()
x = vehicle_counts.index
y = vehicle_counts.values
plt.bar(x, y)
plt.title("Vehicle Type VS Frequency")
plt.ylabel("Frequency")
plt.xlabel("Vehicle Type")
plt.show()
wc=df['Weather_Condition'].value_counts()
x=wc.index
y=wc.values
plt.bar(x,y)
plt.title("Weather Condition VS Frequency")
plt.xlabel("Weather Condition")
plt.ylabel("Frequency")
plt.show()
rc=df['Road_Condition'].value_counts()
x=rc.index
y=rc.values
plt.bar(x,y)
plt.title("Road Condition VS Frequency")
plt.ylabel("Frequency")
plt.xlabel("Road Condition")
plt.show()
hw=df['Helmet_Worn'].value_counts()
x=hw.index
y=hw.values
plt.bar(x,y)
plt.title("Helmet Worn VS Frequency")
plt.ylabel("Frequency")
plt.xlabel("Helmet Worn")
plt.show()
sw=df['Seatbelt_Worn'].value_counts()
x=sw.index
y=sw.values
plt.bar(x,y)
plt.title("Seatbelt Worn VS Frequency")
plt.ylabel("Frequency")
plt.xlabel("Seatbelt Worn")
plt.show()
ba=df['Breathalyzer_Result'].value_counts()
x=ba.index
y=ba.values
plt.bar(x,y)
plt.title("Breathalyzer Result VS Frequency")
plt.ylabel("Frequency")
plt.xlabel("Breathalyzer Result")
plt.show()

from sklearn.model_selection import train_test_split
X=df.drop(columns=['Drive_Life_Risk'])
y=df['Drive_Life_Risk']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor,ExtraTreesRegressor
from sklearn.svm import SVR
lr=LinearRegression()
rr=Ridge(alpha=1.0, max_iter=1000)
l=Lasso(alpha=1.0, max_iter=1000)
en=ElasticNet(alpha=0.1, l1_ratio=0.5, max_iter=1000)
dtr=DecisionTreeRegressor(max_depth=5)
rfr=RandomForestRegressor(n_estimators=1000, max_depth=5)
gbr=GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, max_depth=3)
etr=ExtraTreesRegressor(n_estimators=1000, max_depth=5)
knn=KNeighborsRegressor(n_neighbors=15)
svr=SVR(max_iter=1000)
mlp=MLPRegressor(max_iter=300, random_state=42)

svr.fit(X_train,y_train)
y_pred=svr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

mlp.fit(X_train,y_train)
y_pred=mlp.predict(X_test)
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

knn.fit(X_train,y_train)
y_pred=knn.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

etr.fit(X_train,y_train)
y_pred=etr.predict(X_test)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

rfr.fit(X_train,y_train)
y_pred=rfr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

dtr.fit(X_train,y_train)
y_pred=dtr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

rr.fit(X_train,y_train)
y_pred=rr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

l.fit(X_train,y_train)
y_pred=l.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

en.fit(X_train,y_train)
y_pred=en.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

rfr.fit(X_train,y_train)
y_pred=rfr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
model=Sequential()
model.add(Dense(128,activation='relu',input_shape=(X_train.shape[1],)))
model.add(Dense(64,activation='relu'))
model.add(Dense(32,activation='relu'))
model.add(Dense(1))
model.compile(optimizer='adam',loss='mean_squared_error')
y_pred=model.predict(X_test)
print(model.evaluate(X_test,y_test))

from sklearn.neural_network import MLPRegressor
model = MLPRegressor( max_iter=300, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

gbr.fit(X_train,y_train)
y_pred=gbr.predict(X_test)
# print(y_test)
# print(y_pred)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred))
print("Mean Squared Error (MSE):", mean_squared_error(y_test, y_pred))
print("R-squared (R2):", r2_score(y_test, y_pred))

import pickle
name='project.model'
fp=open(name,'wb')
gbr=pickle.dump(gbr,fp)
fp.close()