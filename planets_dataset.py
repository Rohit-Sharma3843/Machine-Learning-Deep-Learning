# -*- coding: utf-8 -*-
"""Planets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r9OdLt55Wswld6OPt2-fohWeWohNLzDT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df=sns.load_dataset('planets')
print("\n\n--------------------------1--------------------------\n\n")
print(df.info())
print("\n\n--------------------------2--------------------------\n\n")
print(df.head())
print("\n\n--------------------------3--------------------------\n\n")
print(df.tail())
print("\n\n--------------------------4--------------------------\n\n")
print(df.describe())
a=df['method'].value_counts()
print("\n\n--------------------------5--------------------------\n\n")
print(a)
plt.pie(a,labels=a.index,autopct="%.1f")

# from imblearn.under_sampling import RandomUnderSampler
# ros=RandomUnderSampler()
# X_resampled, y_resampled = ros.fit_resample(df.drop('method', axis=1), df['method'])
# df=X_resampled
# df['method']=y_resampled
# df['method'].value_counts()
# df.info()

df.groupby('mass')['distance'].mean()
df=df.sort_values('orbital_period')
df['orbital_period'].interpolate(method='linear',inplace=True)
df=df.sort_values('distance')
df['distance'].interpolate(method='linear',inplace=True)
df.sort_values('mass')
df['mass'].interpolate(method='linear',inplace=True)
df.info()

# from imblearn.over_sampling import SMOTE
# sm=SMOTE()
# df.info()
# df['method'].value_counts()
# df,df['method']=sm.fit_resample(df.drop('method',axis=1),df['method'])
# df['method'].value_counts()

from imblearn.over_sampling import RandomOverSampler,SMOTE
from imblearn.under_sampling import RandomUnderSampler
ros=RandomOverSampler()
df.info()
df, df['method'] = ros.fit_resample(df.drop('method', axis=1), df['method'])
df, df['number'] = ros.fit_resample(df.drop('number', axis=1), df['number'])
print(df['number'].value_counts())
print(df['method'].value_counts())
print(df.info())

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['method']=le.fit_transform(df['method'])

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(df.drop('method',axis=1),df['method'],test_size=0.2,random_state=42)
from sklearn.linear_model import LogisticRegression
lr=LogisticRegression(max_iter=100)
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)

from sklearn.metrics import classification_report,accuracy_score,r2_score,mean_squared_error,mean_absolute_error,recall_score,confusion_matrix
# print(classification_report(y_test,y_pred))
print(accuracy_score(y_test,y_pred))
print(r2_score(y_test,y_pred))
print(mean_squared_error(y_test,y_pred))
print(mean_absolute_error(y_test,y_pred))