# -*- coding: utf-8 -*-
"""Numpy_functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gaANJGPvRDCTYdNR58njEZLySrBpVmJl
"""

import numpy as np
arr=np.array([1,2,3])
print(arr)
arr2=np.array([[1,3,2],[4,12,6],[7,8,9]])
print(arr2)
arr3=np.zeros(10)
print(arr3)
arr4=np.ones(10)
print(arr4)
arr5=np.arange(1,10,2) # np.arange(start,end,step)
print(arr5)
arr6=np.array([6,5,4])
print("Addition : ",arr+arr6)
print("Difference : ",arr-arr6)
print("Product : ",arr*arr6)
print("Division : ",arr/arr6)
print("Power : ",arr**arr6)
print("Scalar multiplication : ",arr*3) # = [1,2,3] * [3,3,3]
print("Scalar addition : ",arr+3) # = [1,2,3] + [3,3,3]
matrix=[ [(i+1)*(j+1) for i in range(3)] for j in range(3)]
arr7=np.array(matrix)
print(matrix)
print(arr7.ndim) #gives us the dimension of the array
print(arr6.ndim)
print(arr7.shape) #gives us the order of the array
print(arr6.shape) #gives us the order of the array
for i in range(arr7.shape[0]): #printing all the elements of the array
    for j in range(arr7.shape[1]):
        print(arr7[i][j],end=" ")
print("\n",arr7.size) #gives us the total number of elements in the array
print("MAX OF ARR6 : ",np.max(arr6))
print("MIN OF ARR6 : ",np.min(arr6))
print(np.max(arr2,axis=0))
print(np.min(arr2,axis=0)) #gives min element of each column
print(np.max(arr2,axis=1)) #gives max element of each row
print(np.min(arr2,axis=1))
arr8=np.array([8,45,56,8,4,25,89])
print("Std:",np.std(arr8))
print(np.mean(arr8))
print("Median : ",np.median(arr8))
print(np.sort(arr8))
print(np.var(arr8))

import numpy as np
arr=np.array([10,1.57,45,100,43,65])
print(np.sin(arr))
print(np.cos(arr))
print(np.tan(arr))
print(np.log(arr))
print(np.log10(arr))
print(np.log2(arr))
print(np.percentile(arr,75))
reshape_matrix1=arr.reshape((3,2))
reshape_matrix2=np.reshape(arr,(2,3))
print(reshape_matrix1) #reshaping to 3*2 matrix
print(reshape_matrix2) #reshaping to 2*3 matrix
matrix=np.array([[4,6,2],[9,6,12]])
print(matrix.flatten()) #flatten
print(matrix.transpose()) #transpose
print(matrix.T) # tranpose