# -*- coding: utf-8 -*-
"""Evaluation_metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v0mpcGnLWr0Lc3CAUTQy1b-hnjmS1bWu
"""

from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
X,y=load_breast_cancer(return_X_y=True,as_frame=True)
X=pd.DataFrame(X)
y=pd.Series(y)
# print(X.info())

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
model=LogisticRegression(max_iter=100000)
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
df=pd.DataFrame({'Actual':y_test,'Predicted':y_pred})
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error,accuracy_score
print(r2_score(y_test,y_pred))
print(mean_absolute_error(y_test,y_pred))
print(mean_squared_error(y_test,y_pred))
print(df.head(50))

print(accuracy_score(y_pred,y_test))

from sklearn.metrics import confusion_matrix,precision_score,recall_score,f1_score,RocCurveDisplay,roc_auc_score,roc_curve
cm=confusion_matrix(y_test,y_pred)
print(cm)
print(cm[0,0])
print(cm[1][0])
print(cm[0,1])
print(cm[1,1])

from sklearn.metrics import confusion_matrix,precision_score,recall_score,f1_score,RocCurveDisplay,roc_auc_score,roc_curve
ps=precision_score(y_test,y_pred) #True positive/(True positive+False positives)
rs=recall_score(y_test,y_pred) #True Positives / (True Positives + False Negatives)
fs=f1_score(y_test,y_pred)
print(ps)
print(rs)
print(fs)
rac=roc_auc_score(y_test,y_pred)
print(rac)
rc=roc_auc_score(y_test,y_pred,multi_class='ovr')
print(rc)
fpr,tpr,_=roc_curve(y_test==0,y_pred)
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
# plt.legend(loc=4)
plt.plot(fpr,tpr,label="Class 0 Roc Curve")
plt.show()

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier(n_neighbors=11)
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(accuracy_score(y_test,y_pred))

from sklearn.ensemble import RandomForestClassifier
model=RandomForestClassifier(n_estimators=10,criterion='entropy',random_state=0)
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(accuracy_score(y_test,y_pred))

from sklearn.svm import SVC
model=SVC(kernel='linear',random_state=0)
model.fit(X_train,y_train)
y_pred=model.predict(X_test)
print(accuracy_score(y_test,y_pred))