# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cn97pa9Ocq37F1qd7xamJ-J2LSzIW5-z
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=sns.load_dataset('titanic')
print("\n\n\n----------------------1---------------------\n\n")
print(df.info())
print("\n\n\n----------------------2---------------------\n\n")
print(df.columns)
print("\n\n\n----------------------3---------------------\n\n")
print(df.describe())
print("\n\n\n----------------------4---------------------\n\n")
print(df.groupby('pclass')[['age','sibsp','parch','fare']].mean())
print("\n\n\n----------------------5---------------------\n\n")
print(df[['alive','survived','sex','who','adult_male','embarked','embark_town']].head(50))
print("\n\n\n----------------------6---------------------\n\n")
print(df[['sibsp','parch','alone']].head(50))
print("\n\n\n----------------------7---------------------\n\n")
df.drop(columns=['alive','adult_male','embark_town','alone'],inplace=True)
a=df['survived'].value_counts()
plt.title("Survived")
plt.pie(a,labels=a.index,autopct='%.1f')
plt.show()
print("\n\n\n----------------------8---------------------\n\n")
b=df['class'].value_counts()
plt.title("Class")
plt.pie(b,labels=b.index,autopct='%.1f')
plt.show()
print("\n\n\n----------------------9---------------------\n\n")
c=df['pclass'].value_counts()
plt.title("Pclass")
plt.pie(c,labels=c.index,autopct='%.1f')
plt.show()
print("\n\n\n----------------------10---------------------\n\n")
d=df['sex'].value_counts()
plt.title("Sex")
plt.pie(d,labels=d.index,autopct='%.1f')
plt.show()
print("\n\n\n----------------------11---------------------\n\n")
e=df['embarked'].value_counts()
plt.title("Embarked")
plt.pie(e,labels=e.index,autopct='%.1f')
plt.show()
print("\n\n\n----------------------12---------------------\n\n")
df.drop(columns=['pclass'],inplace=True)
plt.bar(df['age'],df['fare'])
plt.show()
print("\n\n\n----------------------13---------------------\n\n")
plt.bar(df['fare'],df['age'])
plt.show()
print("\n\n\n----------------------14---------------------\n\n")
plt.bar(df['class'],df['fare'])
plt.show()
print("\n\n\n----------------------15---------------------\n\n")
d=df['deck'].value_counts()
plt.pie(d,labels=d.index,autopct='%.1f')
plt.show()

print("\n\n\n----------------------16---------------------\n\n")
df['deck'].fillna(method='ffill',inplace=True)
print(df)
print("\n\n\n----------------------17---------------------\n\n")
print(df.info())
df['age'].interpolate(method='linear',inplace=True)
df.info()
print("\n\n\n----------------------18---------------------\n\n")
df.dropna(inplace=True)
df.info()
print("\n\n\n----------------------19---------------------\n\n")

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['class']=le.fit_transform(df['class'])
df['sex']=le.fit_transform(df['sex'])
df['embarked']=le.fit_transform(df['embarked'])
df['who']=le.fit_transform(df['who'])
df['deck']=le.fit_transform(df['deck'])
print("\n\n\n----------------------20---------------------\n\n")
print(df)

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler()
df[['fare','age']]=sc.fit_transform(df[['fare','age']])
from sklearn.model_selection import train_test_split
X=df.drop(columns='survived')
y=df['survived']
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
from sklearn.linear_model import LogisticRegression
lr=LogisticRegression(max_iter=100)
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)
from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_log_error,accuracy_score,precision_score,recall_score,f1_score
print("\n\n\n----------------------21---------------------\n\n")
print("R2 : ",r2_score(y_test,y_pred))
print("accuracy : ",accuracy_score(y_test,y_pred))
print("f1_score : ",f1_score(y_test,y_pred))
print("recall_score : ",recall_score(y_test,y_pred))
print("Precision_score : ",precision_score(y_test,y_pred))
print("mean_absolute_error : ",mean_absolute_error(y_test,y_pred))
print("mean_squared_log_error : ",mean_squared_log_error(y_test,y_pred))